//Grid Mixins

@mixin generate-container($pe-container-max-width, $pe-responsive-breakpoints) {
  .pe-container {
    position      : relative;
    max-width     : $pe-container-max-width;
    margin-right  : auto;
    margin-left   : auto;
    min-height    : 1px;
    height        : 100%;
    @include clearfix();

    @each $breakpoint in map-keys($pe-responsive-breakpoints) {

      //Get container margin by breakpoint
      $breakpoint-value : pe-responsive-get-breakpoint-value($breakpoint, min);
      $margin           : map-get($pe-container-margin, $breakpoint);

      //Construct media query
      @media(min-width:#{$breakpoint-value} ){
        padding-right : ($margin / 2);
        padding-left  : ($margin / 2);
      };
    };
  };
};


@mixin position-columns($column, $columns, $current-margin, $pe-container-max-width){
  $column-width : percentage($column / $columns);
  $raw-container: $pe-container-max-width - ($current-margin * $columns);
  $gutter-width : percentage($current-margin / $raw-container);
  $width        : $column-width - $gutter-width;

  float : left;
  width : $width;
};


@mixin generate-columns($pe-responsive-breakpoints){
  $breakpoint-list:();

  @each $breakpoint in map-keys($pe-responsive-breakpoints) {

    //Construct media query
    @media(min-width: pe-responsive-get-breakpoint-value($breakpoint, min)){
      @for $i from 1 through $pe-columns {

        $breakpoint-list: append($breakpoint-list, unquote(".col-#{$breakpoint}-#{$i}"), comma);
        $current-margin : map-get($pe-gutter-widths, $breakpoint);

        //Construct Row
        .pe-row{
          margin-right : $current-margin / -2;
          margin-left  : $current-margin / -2;
          @include clearfix();
        }

        //Construct column
        //(add #{breakpoint to add ability to set breakpoint} .pe-col-#{$breakpoint}-#{$i})
        .pe-col-#{$breakpoint}-#{$i} {
          margin-right : $current-margin / 2;
          margin-left  : $current-margin / 2;
          @include position-columns($i, $pe-columns, $current-margin, $pe-container-max-width);
        };

      };
    };
  };

  #{$breakpoint-list} {
    position   : relative;
    min-height : 1px;
    height     : 100%;
  };
};


@mixin clearfix() {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}
